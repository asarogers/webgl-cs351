Code for me333 final:
#include <xc.h>

// Function to initialize SPI1 with NU32 and configure PPS
void SPI1_init(void) {
    // Disable SPI1 before configuration
    SPI1CON = 0;  
    SPI1BUF;  // Clear buffer
    SPI1BRG = 4;  // Set baud rate (adjust as needed)
    SPI1STATbits.SPIROV = 0;  // Clear overflow flag

    // Configure SPI1 as Master, 16-bit mode
    SPI1CONbits.MSTEN = 1;  // Master mode
    SPI1CONbits.MODE16 = 1; // 16-bit mode
    SPI1CONbits.CKE = 1;    // Data changes on falling edge of clock
    SPI1CONbits.ON = 1;     // Enable SPI1

    // Configure PPS for SPI1
    SDI1R = 0b0000;  // SDI1 on RPA1 (Pin 3)
    RPB1R = 0b0011;  // SDO1 on RPB1 (Pin 5)
    // SCK1 is fixed on a specific pin, typically mapped automatically.

    // Configure SS1 (Slave Select)
    LATBbits.LATB3 = 1; // Set SS1 high (inactive)
    TRISBbits.TRISB3 = 0; // Configure RPB3 as output for SS1 (Pin 7)
}

// Function to send and receive a 16-bit command over SPI1
uint16_t SPI1_transfer(uint16_t data) {
    SPI1BUF = data;  // Send data
    while (!SPI1STATbits.SPIRBF); // Wait until receive buffer is full
    return SPI1BUF; // Read and return received data
}

// Function to read encoder count using SPI1
int16_t read_encoder_count(void) {
    LATBbits.LATB3 = 0;  // SS1 LOW (enable communication)
    int16_t count = SPI1_transfer(0x01); // Send read command (example)
    LATBbits.LATB3 = 1;  // SS1 HIGH (disable communication)
    return count;
}

// Function to reset encoder count using SPI1
void reset_encoder(void) {
    LATBbits.LATB3 = 0;  // SS1 LOW (enable communication)
    SPI1_transfer(0x00); // Send reset command (example)
    LATBbits.LATB3 = 1;  // SS1 HIGH (disable communication)
}
#include <xc.h>

// Function to initialize the ADC
void ADC_init(void) {
    AD1CON1 = 0;        // Clear ADC settings
    AD1CON1bits.FORM = 0; // Integer output format
    AD1CON1bits.SSRC = 7; // Auto-convert
    AD1CON2 = 0;        // Use MUXA, no scan
    AD1CON3bits.ADCS = 2; // ADC clock select
    AD1CHSbits.CH0SA = 2; // Select AN2 (Pin 4) as input
    AD1CON1bits.ADON = 1; // Turn on ADC
}

// Function to read the ADC value from AN2
int read_ADC_AN2(void) {
    AD1CON1bits.SAMP = 1; // Start sampling
    __delay_us(10);       // Sampling time (adjust as needed)
    AD1CON1bits.SAMP = 0; // Start conversion
    while (!AD1CON1bits.DONE); // Wait for conversion to finish
    return ADC1BUF0; // Return ADC value (0-1023 for 10-bit ADC)
}

#include <xc.h>

// Initialize Timer3 and Output Compare 1 (OC1) for PWM on RB8 (Pin 17)
void PWM_init(void) {
    // Configure RB8 as output for PWM
    TRISBbits.TRISB8 = 0;  

    // Configure Timer3 (Base Timer for PWM)
    T3CONbits.TCKPS = 0b010;  // Prescaler 1:4
    PR3 = 1999;               // Set period for 20kHz PWM (adjust as needed)
    TMR3 = 0;                 // Clear Timer3 count
    T3CONbits.ON = 1;         // Turn on Timer3

    // Configure Output Compare 1 (OC1) for PWM mode
    OC1CONbits.OCM = 0b110;   // PWM mode without fault pin
    OC1CONbits.OCTSEL = 1;    // Use Timer3 as clock source
    OC1RS = 0;                // Start with 0% duty cycle
    OC1R = 0;                 // Initialize OC1 register
    OC1CONbits.ON = 1;        // Enable OC1
}

// Set PWM duty cycle (Range: 0-100)
void PWM_set_duty_cycle(int duty_cycle) {
    if (duty_cycle < 0) duty_cycle = 0;   // Limit duty cycle to 0%
    if (duty_cycle > 100) duty_cycle = 100; // Limit duty cycle to 100%
    
    OC1RS = (PR3 * duty_cycle) / 100;  // Calculate PWM duty cycle
}

// Set Motor Direction (Forward = 1, Reverse = 0)
void set_motor_direction(int direction) {
    LATBbits.LATB9 = direction;  // Example: Assign direction control to RB9
    TRISBbits.TRISB9 = 0;        // Configure RB9 as output
}
#include <xc.h>

// Initialize Timer3 for 200 Hz Position Control ISR
void Timer3_init(void) {
    T3CONbits.TCKPS = 0b101; // Prescaler 1:32
    PR3 = 12499;             // PR3 = (40MHz / (32 * 200Hz)) - 1
    TMR3 = 0;                // Clear Timer3
    IPC3bits.T3IP = 1;       // Priority 1
    IPC3bits.T3IS = 1;       // Subpriority 1
    IFS0bits.T3IF = 0;       // Clear Timer3 Interrupt Flag
    IEC0bits.T3IE = 1;       // Enable Timer3 Interrupt
    T3CONbits.ON = 1;        // Turn on Timer3
}

// Timer3 ISR - 200 Hz Position Control
void __ISR(_TIMER_3_VECTOR, IPL1SOFT) PositionControlISR(void) {
    IFS0bits.T3IF = 0; // Clear interrupt flag

    // Add position control logic here
}

// Initialize Timer2 for 5 kHz Current Control ISR
void Timer2_init(void) {
    T2CONbits.TCKPS = 0b011; // Prescaler 1:8
    PR2 = 999;               // PR2 = (40MHz / (8 * 5000Hz)) - 1
    TMR2 = 0;                // Clear Timer2
    IPC2bits.T2IP = 2;       // Priority 2
    IPC2bits.T2IS = 2;       // Subpriority 2
    IFS0bits.T2IF = 0;       // Clear Timer2 Interrupt Flag
    IEC0bits.T2IE = 1;       // Enable Timer2 Interrupt
    T2CONbits.ON = 1;        // Turn on Timer2
}

// Timer2 ISR - 5 kHz Current Control
void __ISR(_TIMER_2_VECTOR, IPL2SOFT) CurrentControlISR(void) {
    IFS0bits.T2IF = 0; // Clear interrupt flag

    // Add current control logic here
}

